import json
import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any

def handler(event, context):
    '''
    Business: Configure and test SMTP email settings for booking notifications
    Args: event - dict with httpMethod, body, queryStringParameters
          context - object with request_id, function_name attributes
    Returns: HTTP response dict with SMTP configuration status
    '''
    method = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    # Get current configuration status
    if method == 'GET':
        email_password = os.environ.get('EMAIL_PASSWORD')
        config_status = {
            'has_email_password': bool(email_password),
            'smtp_server': 'smtp.yandex.ru',
            'smtp_port': 587,
            'admin_email': 'natalya.velikaya@yandex.ru',
            'sender_email': 'natalya.velikaya@yandex.ru'
        }
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps(config_status)
        }
    
    # Test SMTP configuration
    if method == 'POST':
        body_data = json.loads(event.get('body', '{}'))
        action = body_data.get('action')
        
        if action == 'test_smtp':
            email_password = os.environ.get('EMAIL_PASSWORD')
            if not email_password:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': False,
                        'error': 'EMAIL_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                    })
                }
            
            try:
                # Test SMTP connection
                server = smtplib.SMTP('smtp.yandex.ru', 587)
                server.starttls()
                server.login('natalya.velikaya@yandex.ru', email_password)
                
                # Send test email
                msg = MIMEMultipart()
                msg['From'] = 'natalya.velikaya@yandex.ru'
                msg['To'] = 'natalya.velikaya@yandex.ru'
                msg['Subject'] = '–¢–µ—Å—Ç SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ì–∞—Ä–º–æ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–π'
                
                body = '''
–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫.

SMTP —Å–µ—Ä–≤–µ—Ä: smtp.yandex.ru
–ü–æ—Ä—Ç: 587
–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: natalya.velikaya@yandex.ru

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, —Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

---
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "–ì–∞—Ä–º–æ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–π"
                '''
                
                msg.attach(MIMEText(body, 'plain', 'utf-8'))
                server.sendmail('natalya.velikaya@yandex.ru', 'natalya.velikaya@yandex.ru', msg.as_string())
                server.quit()
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': True,
                        'message': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ natalya.velikaya@yandex.ru'
                    })
                }
                
            except Exception as e:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ SMTP: {str(e)}'
                    })
                }
        
        # Send booking notification email
        if action == 'send_notification':
            booking_data = body_data.get('booking_data', {})
            email_password = os.environ.get('EMAIL_PASSWORD')
            
            if not email_password:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': False,
                        'error': 'EMAIL_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
                    })
                }
            
            try:
                server = smtplib.SMTP('smtp.yandex.ru', 587)
                server.starttls()
                server.login('natalya.velikaya@yandex.ru', email_password)
                
                # Email to admin
                msg = MIMEMultipart()
                msg['From'] = 'natalya.velikaya@yandex.ru'
                msg['To'] = 'natalya.velikaya@yandex.ru'
                msg['Subject'] = f'–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {booking_data.get("service_name", "–£—Å–ª—É–≥–∞")}'
                
                body = f'''
–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É!

üë§ –ö–ª–∏–µ–Ω—Ç: {booking_data.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data.get("client_phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
üìß Email: {booking_data.get("client_email", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}

üóì –î–∞—Ç–∞: {booking_data.get("appointment_date", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
üïí –í—Ä–µ–º—è: {booking_data.get("appointment_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")} - {booking_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
üíÜ‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {booking_data.get("service_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}

–°—Ç–∞—Ç—É—Å: {booking_data.get("status", "pending")}

---
–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ "–ì–∞—Ä–º–æ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–π"
–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–∞–π—Ç–∞.
                '''
                
                msg.attach(MIMEText(body, 'plain', 'utf-8'))
                server.sendmail('natalya.velikaya@yandex.ru', 'natalya.velikaya@yandex.ru', msg.as_string())
                server.quit()
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': True,
                        'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
                    })
                }
                
            except Exception as e:
                return {
                    'statusCode': 400,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'
                    })
                }
    
    return {
        'statusCode': 405,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})
    }